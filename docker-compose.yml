# docker-compose.yml
services:
  db:
    image: postgres:15
    restart: always
    environment:
      # Đọc từ file .env
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"] # Sửa lại để dùng biến môi trường nếu có
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Đặt trực tiếp tên service của DB làm host cho app
      DB_HOST: ${POSTGRES_HOST}
      # Đọc các biến còn lại từ file .env
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432 # Hoặc ${POSTGRES_PORT:-5432} nếu bạn định nghĩa trong .env
      PORT: ${PORT:-3001} # Đọc PORT từ .env, mặc định 3001 nếu không có
      NODE_ENV: development # Thường nên đặt rõ môi trường
      JWT_SECRET: ${JWT_SECRET} # Đọc JWT_SECRET từ .env
    ports:
      # Ánh xạ cổng host (ví dụ 3001) tới cổng container (được đọc từ PORT, mặc định 3001)
      - "${PORT:-3001}:${PORT:-3001}"
    # Healthcheck nên dùng cổng ${PORT}
    healthcheck:
      test: curl --fail http://localhost:${PORT:-3001} || exit 1 # Dùng curl cho đơn giản
      # Hoặc giữ lệnh node của bạn nhưng dùng PORT
      # test: node -e "require('http').get('http://localhost:${process.env.PORT || 3001}', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"
      interval: 30s
      timeout: 10s # Cho timeout dài hơn chút
      retries: 3
      start_period: 10s # Cho app thêm thời gian khởi động + migrate

volumes:
  postgres_data: